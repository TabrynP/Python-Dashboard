import base64
import io
import datetime

import dash
from dash.dependencies import Input, Output
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go
import dash_table_experiments as dt
import plotly.plotly as py

import pandas as pd

app = dash.Dash()

app.scripts.config.serve_locally = True

df = pd.read_excel("https://github.com/TabrynP/python-dashboard/blob/master/data.xlsx")


app.layout = html.Div([
    dcc.Dropdown(
        id='graph-type',
        options=[
            {'label': 'Bar Graph', 'value': 'bar-graph'},
            {'label': 'Line Graph', 'value': 'line-graph'},
            {'label': 'Area Plot', 'value': 'area-plot'}],
        value='area-plot'),
    html.Div(
        id='data_table',
        rows=df['DATE'],
        colums=df['TMAX']
    ),
    html.Div(id='output')])


@app.callback(
    Output('output', 'children'),
    [Input('graph-type', 'value'),
     Input('data_table', 'rows'),
     Input('data_table', 'cols')])
def update_output(graph_type, table_rows, table_columns):
    if graph_type == 'bar-graph':
        return html.Div(
            go.Bar(
                x=table_rows,
                y=table_columns
            )
        )
    elif graph_type == 'line-graph':
        return html.Div(
            go.Line(
                x=table_rows,
                y=table_columns
            )
        )
    else:
        return html.Div(
            go.Area(
                x=table_rows,
                y=table_columns
            )
        )


app.css.append_css({
    'external_url': 'http://codepen.io/chriddyp/pen/bWLwgP.css'
})

if __name__ == '__main__':
    app.run_server(debug=True)

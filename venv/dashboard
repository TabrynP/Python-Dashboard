
import dash
from dash.dependencies import Input, Output
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go
import dash_table_experiments as dt

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/TabrynP/python-dashboard/master/data.csv')

app = dash.Dash()

app.scripts.config.serve_locally = True

app.layout = html.Div([
    dcc.Dropdown(
        id='graph-type',
        options=[
            {'label': 'Bar Graph', 'value': 'bar-graph'},
            {'label': 'Line Graph', 'value': 'line-graph'},
            {'label': 'Area Plot', 'value': 'area-plot'}],
        value=''),

    html.Div(id='output'),

    html.Div(
        dt.DataTable(
            id='data_table',
            rows=df.to_dict('records'),
            columns=sorted(df.columns),
            row_selectable=True,
            filterable=True,
            sortable=True,
            selected_row_indices=[],
        )
    )])


@app.callback(
    Output('output', 'children'),
    [Input('graph-type', 'value'),
     Input('data_table', 'rows')])
def update_output(graph_type, rows):
    dff = pd.DataFrame(rows)
    if graph_type == 'bar-graph':
        children = [
            html.Div(
                dcc.Graph(
                    figure=go.Figure(
                        data=[
                            go.Bar(
                                x=dff['DATE'],
                                y=dff['TMAX']
                            )
                        ],
                        layout=go.Layout(
                            title='Bar Chart of Max Temp vs. Date'
                        )
                    ),
                    id='bar'
                ),
            )
        ]
    elif graph_type == 'line-graph':
        children = [
            html.Div(
                dcc.Graph(
                    figure=go.Figure(
                        data=[
                            go.Scatter(
                                x=dff['DATE'],
                                y=dff['TMAX']
                            )
                        ],
                        layout=go.Layout(
                            title='Line Graph of Max Temp vs Date'
                        )
                    ),
                    id='line'
                ),
            )
        ]
    else:
        children = [
            html.Div(
                dcc.Graph(
                    figure=go.Figure(
                        data=[
                            go.Scatter(
                                x=dff['DATE'],
                                y=dff['TMAX'],
                                fill='tonexty'
                            )
                        ],
                        layout=go.Layout(
                            title='Area Plot of Max Temp. vs Date'
                        )
                    ),
                    id='area'
                ),
            )
        ]
    return children


app.css.append_css({
    'external_url': 'http://codepen.io/chriddyp/pen/bWLwgP.css'
})

if __name__ == '__main__':
    app.run_server(debug=True)
